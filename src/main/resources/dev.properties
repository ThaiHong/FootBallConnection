server.port = 8080
# --------------------- Configuration JPA ------------------------------
# DataSource settings: set here your own configurations for the database
# Change about information database accordingly for your DB
spring.datasource.url = jdbc:mysql://localhost:3306/awesomeevent_dev?characterEncoding=UTF-8
spring.datasource.username = root
spring.datasource.password = admin123

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming.strategy = org.hibernate.cfg.ImprovedNamingStrategy

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

security.secretKey = awesomeevents2016
security.expirationTime = 86400
awesomeevent.domain = http://192.168.70.60:8081
# Email config for app
spring.mail.host = smtp.gmail.com
spring.mail.username = aws.terminal@gmail.com
spring.mail.password = aavn@123
spring.mail.port=587
spring.mail.properties.mail.smtp.starttls.enable = true
# ===============================
# = HIBERNATE SEARCH
# ===============================

# Spring Data JPA will take any properties under spring.jpa.properties.* and
# pass them along (with the prefix stripped) once the EntityManagerFactory is
# created.

# Specify the DirectoryProvider to use (the Lucene Directory)
spring.jpa.properties.hibernate.search.default.directory_provider = filesystem

# Using the filesystem DirectoryProvider you also have to specify the default
# base directory for all indexes (make sure that the application have write
# permissions on such directory)
spring.jpa.properties.hibernate.search.default.indexBase = /var/awesome/lucene/indexes/

# ===============================
# = THYMELEAF
# ===============================

spring.thymeleaf.cache = false
spring.http.multipart.max-file-size= 20Mb
spring.http.multipart.max-request-size= 20Mb